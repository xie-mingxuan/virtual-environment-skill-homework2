//事件-鼠标-键盘
// BVTEvent_types.js
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


export const TMouseEventType = {
  'MouseEventTypeUnknow' : 0,
  'MouseEventTypeDown' : 1,
  'MouseEventTypeUp' : 2,
  'MouseEventTypeDrag' : 3,
  'MouseEventTypeClick' : 4,
  'MouseEventTypeDblClick' : 5,
  'MouseEventTypeMove' : 6,
  'MouseEventTypeWheel' : 7,
  'MouseEventTypeHover' : 8,
  'MouseEventTypeEnter' : 9,
  'MouseEventTypeLeave' : 10
};

export const  TMouseButton = {
  'MouseButtonUnknow' : 0,
  'MouseButtonLeft' : 1,
  'MouseButtonRight' : 2,
  'MouseButtonMiddle' : 4,
  'MouseButtonForward' : 8,
  'MouseButtonBack' : 16,
  'MouseButtonDpi' : 32
};
export const TModKey = {
  'ModKeyUnknow' : 0,
  'ModKeyLeftCtl' : 1,
  'ModKeyRightCtl' : 2,
  'ModKeyCtl' : 3,
  'ModKeyLeftAlt' : 4,
  'ModKeyRightAlt' : 8,
  'ModKeyAlt' : 12,
  'ModKeyLeftShift' : 16,
  'ModKeyRightShift' : 32,
  'ModKeyShift' : 48,
  'ModKeyLeftMeta' : 64,
  'ModKeyRightMeta' : 128,
  'ModKeyMeta' : 192,
  'ModKeyNumLock' : 256,
  'ModKeyCapsLock' : 512
};
export const TKeyEventType = {
  'KeyEventTypeUnknow' : 0,
  'KeyEventTypeDown' : 1,
  'KeyEventTYpeUp' : 2
};
export const TCursorType = {
  'CursorTypeUnknown' : 0,
  'CursorTypeInherit' : 1,
  'CursorTypeArrow' : 2,
  'CursorTypeUpArrow' : 3,
  'CursorTypeOpenHand' : 4,
  'CursorTypeCloseHand' : 5,
  'CursorTypeWait' : 6,
  'CursorTypeSizeAll' : 7,
  'CursorTypeSizeV' : 8,
  'CursorTypeSizeH' : 9,
  'CursorTypeSizeTL' : 10,
  'CursorTypeSizeTR' : 11,
  'CursorTypeCross' : 12,
  'CursorTypeHelp' : 13,
  'CursorTypeSplitV' : 14,
  'CursorTypeSplitH' : 15,
  'CursorTypeBusy' : 16,
  'CursorTypeForbidden' : 17,
  'CursorTypeBeam' : 18,
  'CursorTypeBlank' : 19,
  'CursorTypeDragCopy' : 20,
  'CursorTypeDragMove' : 21,
  'CursorTypeDragLink' : 22,
  'CursorTypePointingHand' : 23,
  'CursorTypeUser' : 24
};
export const TKeyVal = {
  'KEY_ESCAPE' : 256,
  'KEY_TAB' : 257,
  'KEY_BACKTAB' : 258,
  'KEY_BACKSPACE' : 259,
  'KEY_RETURN' : 260,
  'KEY_ENTER' : 261,
  'KEY_INSERT' : 262,
  'KEY_DELETE' : 263,
  'KEY_PAUSE' : 264,
  'KEY_PRINT' : 265,
  'KEY_SYSREQ' : 266,
  'KEY_CLEAR' : 267,
  'KEY_HOME' : 272,
  'KEY_END' : 273,
  'KEY_LEFT' : 274,
  'KEY_UP' : 275,
  'KEY_RIGHT' : 276,
  'KEY_DOWN' : 277,
  'KEY_PAGEUP' : 278,
  'KEY_PAGEDOWN' : 279,
  'KEY_SHIFT' : 288,
  'KEY_CONTROL' : 289,
  'KEY_META' : 290,
  'KEY_ALT' : 291,
  'KEY_CAPSLOCK' : 292,
  'KEY_NUMLOCK' : 293,
  'KEY_SCROLLLOCK' : 294,
  'KEY_SUPER_L' : 304,
  'KEY_SUPER_R' : 305,
  'KEY_MENU' : 306,
  'KEY_HYPER_L' : 307,
  'KEY_HYPER_R' : 308,
  'KEY_HELP' : 309,
  'KEY_DIRECTION_L' : 310,
  'KEY_DIRECTION_R' : 311,
  'KEY_ASCIICIRCUM' : 312,
  'KEY_MULTIPLY' : 314,
  'KEY_SEPARATOR' : 315,
  'KEY_SUBTRACT' : 316,
  'KEY_DECIMAL' : 317,
  'KEY_DIVIDE' : 318,
  'KEY_PAD_0' : 384,
  'KEY_PAD_1' : 385,
  'KEY_PAD_2' : 386,
  'KEY_PAD_3' : 387,
  'KEY_PAD_4' : 388,
  'KEY_PAD_5' : 389,
  'KEY_PAD_6' : 390,
  'KEY_PAD_7' : 391,
  'KEY_PAD_8' : 392,
  'KEY_PAD_9' : 393,
  'KEY_PAD_MULTIPLY' : 394,
  'KEY_PAD_ADD' : 395,
  'KEY_PAD_ENTER' : 396,
  'KEY_PAD_SUBTRACT' : 397,
  'KEY_PAD_DECIMAL' : 398,
  'KEY_PAD_DIVIDE' : 399,
  'KEY_F1' : 416,
  'KEY_F2' : 417,
  'KEY_F3' : 418,
  'KEY_F4' : 419,
  'KEY_F5' : 420,
  'KEY_F6' : 421,
  'KEY_F7' : 422,
  'KEY_F8' : 423,
  'KEY_F9' : 424,
  'KEY_F10' : 425,
  'KEY_F11' : 426,
  'KEY_F12' : 427,
  'KEY_F13' : 428,
  'KEY_F14' : 429,
  'KEY_F15' : 430,
  'KEY_F16' : 431,
  'KEY_F17' : 432,
  'KEY_F18' : 433,
  'KEY_F19' : 434,
  'KEY_F20' : 435,
  'KEY_F21' : 436,
  'KEY_F22' : 437,
  'KEY_F23' : 438,
  'KEY_F24' : 439,
  'KEY_SPACE' : 32,
  'KEY_ANY' : 32,
  'KEY_ASCIITILDE' : 126,
  'KEY_EXCLAM' : 33,
  'KEY_AT' : 64,
  'KEY_NUMBERSIGN' : 35,
  'KEY_DOLLAR' : 36,
  'KEY_PERCENT' : 37,
  'KEY_CARET' : 94,
  'KEY_AMPERSAND' : 38,
  'KEY_ASTERISK' : 42,
  'KEY_PARENLEFT' : 40,
  'KEY_PARENRIGHT' : 41,
  'KEY_MINUS' : 45,
  'KEY_EQUAL' : 61,
  'KEY_QUOTELEFT' : 96,
  'KEY_1' : 49,
  'KEY_2' : 50,
  'KEY_3' : 51,
  'KEY_4' : 52,
  'KEY_5' : 53,
  'KEY_6' : 54,
  'KEY_7' : 55,
  'KEY_8' : 56,
  'KEY_9' : 57,
  'KEY_0' : 48,
  'KEY_UNDERSCORE' : 95,
  'KEY_PLUS' : 43,
  'KEY_A' : 65,
  'KEY_B' : 66,
  'KEY_C' : 67,
  'KEY_D' : 68,
  'KEY_E' : 69,
  'KEY_F' : 70,
  'KEY_G' : 71,
  'KEY_H' : 72,
  'KEY_I' : 73,
  'KEY_J' : 74,
  'KEY_K' : 75,
  'KEY_L' : 76,
  'KEY_M' : 77,
  'KEY_N' : 78,
  'KEY_O' : 79,
  'KEY_P' : 80,
  'KEY_Q' : 81,
  'KEY_R' : 82,
  'KEY_S' : 83,
  'KEY_T' : 84,
  'KEY_U' : 85,
  'KEY_V' : 86,
  'KEY_W' : 87,
  'KEY_X' : 88,
  'KEY_Y' : 89,
  'KEY_Z' : 90,
  'KEY_BRACKETLEFT' : 91,
  'KEY_BACKSLASH' : 92,
  'KEY_BRACKETRIGHT' : 93,
  'KEY_BRACELEFT' : 123,
  'KEY_BAR' : 124,
  'KEY_BRACERIGHT' : 125,
  'KEY_QUOTE' : 39,
  'KEY_QUOTEDBL' : 34,
  'KEY_COMMA' : 44,
  'KEY_PERIOD' : 46,
  'KEY_SLASH' : 47,
  'KEY_COLON' : 58,
  'KEY_SEMICOLON' : 59,
  'KEY_LESS' : 60,
  'KEY_GREATER' : 62,
  'KEY_QUESTION' : 63
};
export const TPoint2i = function(args) {
  var TPoint2i = {
    x : null,
    y  : null
  }

  if (args) {
    if (args.x !== undefined && args.x !== null) {
      TPoint2i.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      TPoint2i.y = args.y;
    }
  }
  return TPoint2i
};
export const TPoint2iPrototype = {};
export const TPoint2iPrototypeRead = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.x = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.I32) {
          this.y = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

export const TPoint2iPrototypeWrite = function(output) {
  output.writeStructBegin('TPoint2i');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

export const TPoint2d = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
export const TPoint2dPrototype = {};
export const TPoint2dPrototypeRead = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.x = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.y = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

export const TPoint2dPrototypeWrite = function(output) {
  output.writeStructBegin('TPoint2d');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

export const TSize = function(args) {
  this.width = null;
  this.height = null;
  if (args) {
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
  }
};
export const TSizePrototype = {};
export const TSizePrototypeRead = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.width = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.height = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

export const TSizePrototypeWrite = function(output) {
  output.writeStructBegin('TSize');
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.height);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

export const TCursor = function(args) {
  this.type = 0;
  this.cursorMap = null;
  this.result = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.cursorMap !== undefined && args.cursorMap !== null) {
      this.cursorMap = args.cursorMap;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
  }
};
export const TCursorPrototype = {};
export const TCursorPrototypeRead = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.cursorMap = input.readBinary().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.result = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

export const TCursorPrototypeWrite = function(output) {
  output.writeStructBegin('TCursor');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.cursorMap !== null && this.cursorMap !== undefined) {
    output.writeFieldBegin('cursorMap', Thrift.Type.STRING, 2);
    output.writeBinary(this.cursorMap);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 3);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

export const TMouseEvent = function(args) {
  var TMouseEvent = {
    type : null,
    modifiers  : null,
    position  : null,
    wheelDelta  : null,
    button  : null,
    buttons  : null
  }

  if (args) {
    if (args.type !== undefined && args.type !== null) {
      TMouseEvent.type = args.type;
    }
    if (args.modifiers !== undefined && args.modifiers !== null) {
      TMouseEvent.modifiers = args.modifiers;
    }
    if (args.position !== undefined && args.position !== null) {
      TMouseEvent.position = new TPoint2i(args.position);
    }
    if (args.wheelDelta !== undefined && args.wheelDelta !== null) {
      TMouseEvent.wheelDelta = new TPoint2d(args.wheelDelta);
    }
    if (args.button !== undefined && args.button !== null) {
      TMouseEvent.button = args.button;
    }
    if (args.buttons !== undefined && args.buttons !== null) {
      TMouseEvent.buttons = args.buttons;
    }
  }

  return TMouseEvent
};
export const TMouseEventPrototype = {};
export const TMouseEventPrototypeRead = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.I32) {
          this.modifiers = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.position = new TPoint2i();
          this.position.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.wheelDelta = new TPoint2d();
          this.wheelDelta.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.I32) {
          this.button = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.I32) {
          this.buttons = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

export const TMouseEventPrototypeWrite = function(output) {
  output.writeStructBegin('TMouseEvent');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.modifiers !== null && this.modifiers !== undefined) {
    output.writeFieldBegin('modifiers', Thrift.Type.I32, 2);
    output.writeI32(this.modifiers);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRUCT, 3);
    this.position.write(output);
    output.writeFieldEnd();
  }
  if (this.wheelDelta !== null && this.wheelDelta !== undefined) {
    output.writeFieldBegin('wheelDelta', Thrift.Type.STRUCT, 4);
    this.wheelDelta.write(output);
    output.writeFieldEnd();
  }
  if (this.button !== null && this.button !== undefined) {
    output.writeFieldBegin('button', Thrift.Type.I32, 5);
    output.writeI32(this.button);
    output.writeFieldEnd();
  }
  if (this.buttons !== null && this.buttons !== undefined) {
    output.writeFieldBegin('buttons', Thrift.Type.I32, 6);
    output.writeI32(this.buttons);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

export const TKeyEvent = function(args) {
  var TKeyEvent = {
    type : null,
    keyValue  : null,
    modifiers  : null
  }
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.keyValue !== undefined && args.keyValue !== null) {
      this.keyValue = args.keyValue;
    }
    if (args.modifiers !== undefined && args.modifiers !== null) {
      this.modifiers = args.modifiers;
    }
  }
  return TKeyEvent
};
export const TKeyEventPrototype = {};
export const TKeyEventPrototypeRead = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.I32) {
          this.keyValue = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.I32) {
          this.modifiers = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

export const TKeyEventPrototypeWrite = function(output) {
  output.writeStructBegin('TKeyEvent');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.keyValue !== null && this.keyValue !== undefined) {
    output.writeFieldBegin('keyValue', Thrift.Type.I32, 2);
    output.writeI32(this.keyValue);
    output.writeFieldEnd();
  }
  if (this.modifiers !== null && this.modifiers !== undefined) {
    output.writeFieldBegin('modifiers', Thrift.Type.I32, 3);
    output.writeI32(this.modifiers);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
